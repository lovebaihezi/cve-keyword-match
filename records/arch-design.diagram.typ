#import "@preview/cetz:0.1.2": canvas, draw, tree


#let arch-flow() = {
  import "@preview/fletcher:0.2.0": diagram, node, edge
  diagram(cell-size: 6cm, {
    let start = (0, 3)
    let arg_adapter = (1, 3)
    let understand_project_structure = (2, 3)
    let use_prev_ir = (2, 2)
    let compile_new_ir = (1, 2)
    let read_ir_by_pr = (4, 0)
    let genrate_profile = (5, 0)
    let analysis = (6, 0)
    let result = (7, 0)
    
    node(start, [option adapter])
    node(arg_adapter, [args adapter])
    node(understand_project_structure, [
      project structure
    ])
    node(use_prev_ir, [IR reader])
    
    edge(start, arg_adapter, `parse`, "->")
    
    edge(
      arg_adapter, 
      understand_project_structure, 
      [
        read build commands
      ], 
      "->", 
    )

    edge(
      understand_project_structure,
      use_prev_ir,
      [use_prev_ir],
      "->"
    )
  })
}

#let arch-graph() = {
  let arch = (
    [
      option adapter
    ], 
    [
      project structure
    ], 
    (
      [
        compile all source to IR according to the 
      ],
      [
        
      ]
    )
  )

  canvas(length: 2cm, {
    import draw: *
  
    set-style(content: (padding: .2),
      fill: gray.lighten(70%),
      stroke: black.lighten(70%))
  
    tree.tree(arch, spread: 2.5, grow: 1.5, draw-node: (node, _) => {
      circle((), radius: .45, stroke: none)
      content((), node.content)
    }, draw-edge: (from, to, _) => {
      line((a: from, number: .6, abs: true, b: to),
           (a: to, number: .6, abs: true, b: from), mark: (end: ">"))
    }, name: "tree")
  
    // // Draw a "custom" connection between two nodes
    // let (a, b) = ("tree.0-0-1", "tree.0-1-0",)
    // line((a: a, number: .6, abs: true, b: b), (a: b, number: .6, abs: true, b: a), mark: (end: ">", start: ">"))
  })
}

#arch-flow()