#import "2023-12-collect-cve.typ": CVE-threads-table, CVE-locks-table
= 2023 12 28

== Last week

Tasks: 

== This Week

=== Read CVEs about Multi threads, data racing, etc.

#let count = 10

downloads from cve.org github repo

// Get recent CVE about threads

// A pie graph: High, Medium, Low

cve.org include $234297$ CVE, 151 CVE descriptions contains `threads`, 30 of them have extra info.

#CVE-threads-table

#pagebreak()

// cve.org include $234297$ CVE, 56 CVE descriptions contains ` locks ` 

// #CVE-locks-table

find insight from the CVE

== High/Critical

=== CVE-2023-6546

Race Condition

found in Linux kernel, can get the source code, cause of multi-thread executing the same function on the same tty file descriptor(or called os resource)

=== CVE-2023-3397

Race Condition

Also, in the Linux kernel, two functions run in different threads, need to be checked later

=== CVE-2022-29503

Thread allocation will lead to memory corruption, can get source code

=== CVE-2022-22097

multi-thread application will cause use-after-free, close-source application, internal report, no more other information

=== CVE-2023-50164

Apache struts, a Java Web Framework, an attacker can manipulate file upload parameters to enable a path traversal and under some circumstances, this can lead to uploading a malicious file which can be used to perform remote code execution.

Like log4j issue which reported by Alibaba, remote code execution

=== CVE-2023-6932

Linux kernel, use-after-free, Race condition

=== CVE-2022-23639

Rust, code design for 64-bit but runs on 32-bit machine

=== CVE-2021-29509

improper lock, aquire many thread(os resouce) but can not return to the os on time

=== CVE-2020-6196

=== CVE-2016-8623

Curl, use-after-free, information disclosure

== regression

=== CVE-2023-34450

_
CometBFT is a Byzantine Fault Tolerant (BFT) middleware that takes a state transition machine and replicates it on many machines. An internal modification made in versions 0.34.28 and 0.37.1 to the way struct `PeerState` is serialized to JSON introduced a deadlock when new function MarshallJSON is called. This function can be called from two places. The first is via logs, setting the `consensus` logging module to "debug" level (should not happen in production), and setting the log output format to JSON. The second is via RPC `dump_consensus_state`. Case 1, which should not be hit in production, will eventually hit the deadlock in most goroutines, effectively halting the node. In case 2, only the data structures related to the first peer will be deadlocked, together with the thread(s) dealing with the RPC request(s). This means that only one of the channels of communication to the node's peers will be blocked. Eventually the peer will timeout and excluded from the list (typically after 2 minutes). The goroutines involved in the deadlock will not be garbage collected, but they will not interfere with the system after the peer is excluded. The theoretical worst case for case 2, is a network with only two validator nodes. In this case, each of the nodes only has one `PeerState` struct. If `dump_consensus_state` is called in either node (or both), the chain will halt until the peer connections time out, after which the nodes will reconnect (with different `PeerState` structs) and the chain will progress again. Then, the same process can be repeated. As the number of nodes in a network increases, and thus, the number of peer struct each node maintains, the possibility of reproducing the perturbation visible with two nodes decreases. Only the first `PeerState` struct will deadlock, and not the others (RPC `dump_consensus_state` accesses them in a for loop, so the deadlock at the first iteration causes the rest of the iterations of that "for" loop to never be reached). This regression was fixed in versions 0.34.29 and 0.37.2. Some workarounds are available. For case 1 (hitting the deadlock via logs), either don't set the log output to "json", leave at "plain", or don't set the consensus logging module to "debug", leave it at "info" or higher. For case 2 (hitting the deadlock via RPC `dump_consensus_state`), do not expose `dump_consensus_state` RPC endpoint to the public internet (e.g., via rules in one's nginx setup).
_

== Next Week

Features or pattern extract

from the dataset(151 CVE)

The Idea of how to filter the result may can be write in the paper

=== Kinds

*Find less false positive*

== Records

Record of the meeting(from OBS): 

First principle of the current project: 

Current target: find the impact of the project

USENIX: System

Oakland: Revolution

NDSS: Net

CCS: Everything