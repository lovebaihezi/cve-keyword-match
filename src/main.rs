use std::{io::Write, path::PathBuf};

use clap::Parser;
use cve_match_keyword::{json_file_des_value_include_keyword, paths, CVE};
use futures::future::join_all;

#[derive(Parser)]
#[command(name = "cli")]
#[command(version = "0.2")]
struct Args {
    keyword: String,
}

fn main() -> std::io::Result<()> {
    env_logger::init();
    // TODO(chaibowen): change to iter, not read all the sub-files
    let mut output = vec![];
    let files = paths(".")?;
    log::info!("read from {} cve file", files.len());
    let arg: Args = clap::Parser::parse();
    let mut count = 0;
    let cves = tokio_uring::start(async move {
        let iter = files
            .iter()
            .map(|path| json_file_des_value_include_keyword(path, &arg.keyword));
        join_all(iter).await
    });
    for cve in cves {
        log::error!("failed to process {:?}, cause: {}", path, e.to_string());
        // TODO(chaibowen): consider as a task rather then run in order
    }
    std::io::stdout().write_all(&output.as_slice())?;
    log::info!("{} cve description cantains {:?}", count, &arg.keyword);
    Ok(())
}
